<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Recommend by User</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
    <script src = "GetUserRec.js"></script>
</head>
<body>
    <div style="position: absolute; top:1%; left:1%">
        <a href="../index.html"><button >Home</button></a>
    </div>
    <div style="position: absolute; top:15%; left:5%">
        <h3>Recommend by User</h3>
        <form action="http://localhost:8080/users/recommendations" method="get" id="search-form">
            <label for="gender">Gender:</label><br>
            <input type="text" id="gender" name="gender"><br>
            <label for="age">Age:</label><br>
            <input type="text" id="age" name="age"><br>
            <label for="occupation">Occupation:</label><br>
            <input type="text" id="occupation" name="occupation"><br>
            <label for="genre">Genre:</label><br>
            <input type="text" id="genre" name="genre"><br>
            <input type="submit" value="Submit">
            <div id="springResponse"></div>
        </form>
    </div>

</body>
</html>
$(document).ready(function() {
    $("#search-form").submit(function (event) {
        event.preventDefault();
        let url = $(this).attr("action"); //get form action url
        let method = $(this).attr("method"); //get form GET/POST method
        let data = new FormData(this); //Encode form elements for submission

        var str = "";
        data.forEach(function(value, key){
            if(str != "")str += "&";
            str += key + "=" + value;
        });

        url += '?' + str;
        $.ajax({
            url : url,
            type: method,


        }).done(function(response){
            $('.springResponse').html(response[0]);
            console.log(response);
        }).fail(function(er){
            console.log(er);
        });
    });
});

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>RecS</title>

    <style>
        body {
            padding: 25px;
            background-color: white;
            color: black;
            font-size: 25px;
        }

        .dark-mode {
            background-color: black;
            color: white;
        }

        .vertical-center {
            margin: 0;
            position: absolute;
            top: 3%;
            left: 90%;
            -ms-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%);
        }

        .button_1 {
            background-color: #008CBA;
            color: blue;
            display: inline-block;
            font-size: 14px;
            border: 2px solid white;
            font-family: "JetBrains Mono";
            border-radius: 12px;
            transition-duration: 1ms;
            cursor: pointer;
            margin: 4px 2px;
            width: 100px
        }
        .button_1b {
            color: white;
            border: 2px solid #008CBA;
        }
        .button_1b:hover {
            background-color: #008CBA;
            color: white;
            font-size: 30px;
            width: 200px
        }

        .header {
            padding: 5px;
            text-align: center;
            background: inherit;
            color: inherit;
            font-size: 27px;
        }

        .image {
            width: 125px;
            height: 175px;
            border: solid 2px red;
        }
    </style>
</head>
<body>
    <h1 class="header">Recommendation System by Group-7</h1>
    <hr style="border-bottom-style: double">

    <script>
        function darkMode() {
            const element = document.body;
            const btn = document.getElementById("modeSwitcher");
            element.classList.toggle("dark-mode");
            if(element.classList.contains("dark-mode"))
                btn.innerHTML= "Normal Mode";
            else
                btn.innerHTML= "Dark Mode";
        }
    </script>

    <div class="container">
        <div class="vertical-center">
            <button class="button_1 button_1b" onclick="darkMode()" id="modeSwitcher" >Dark Mode</button>
        </div>
        <div>
            <a href="./users/recommendations.html">
                <h2>Recommends by User</h2>
            </a>
            <a href="./movies/recommendations.html" style="position:relative;">
                <h2>Recommends by Favorite Genre</h2>
            </a>
        </div>
        <div style="position: center">
            <h3>Most popular movies</h3>
            <div class="blockList">
                <div class="card">
                    <img src="no-cover.png" class="image">
                </div>
            </div>
        </div>
    </div>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Recommend by Fav Movie</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
    <script src="GetMovieRec.js"></script>
</head>
<body>
    <div style="position: absolute; top:1%; left:1%">
        <a href="../index.html"><button >Home</button></a>
    </div>
    <div style="position: absolute; top:15%; left:5%">
        <h3>Recommend by Favorite Movie</h3>
        <form action="http://localhost:8080/movies/recommendations" method="get">
            <label for="title">Movie Title:</label><br>
            <input type="text" id="title" name="title"><br>
            <label for="limit">Limit:</label><br>
            <input type="text" id="limit" name="limit"><br>
            <input type="submit" value="Submit">
        </form>
    </div>
</body>
</html>
$(document).ready(function() {
    $("#search-form").submit(function (event) {
        event.preventDefault();
        let url = $(this).attr("action"); //get form action url
        let method = $(this).attr("method"); //get form GET/POST method
        let data = new FormData(this); //Encode form elements for submission

        var str = "";
        data.forEach(function(value, key){
            if(str != "")str += "&";
            str += key + "=" + value;
        });

        url += '?' + str;
        $.ajax({
            url : url,
            type: method,

        }).done(function(response){
            $('#springResponse').html(response);
        }).fail(function(er){
            console.log(er);
        });
    });
});

package RecS.Models;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document
public class Ratings {
    @Id
    private final String userID;
    private final String movieID;
    private final String rating;
    private final String timestamp;

    public Ratings(String userID, String movieID, String rating, String timestamp) {
        this.userID = userID;
        this.movieID = movieID;
        this.rating = rating;
        this.timestamp = timestamp;
    }

    public String getUserID() {
        return userID;
    }

    public String getMovieID() {
        return movieID;
    }

    public String getRating() {
        return rating;
    }

    public String getTimestamp() {
        return timestamp;
    }
}

package RecS.Models;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document
public class Movies {
    @Id
    private final String movieID;
    private final String title;
    private final String genres;
    private final String posterLink;
    private final String imdbID;

    public Movies(String movieID, String title, String genres, String posterLink, String imdbID) {
        this.title = title;
        this.movieID = movieID;
        this.genres = genres;
        this.posterLink = posterLink;
        this.imdbID = imdbID;
    }

    public String getPosterLink() { return posterLink; }

    public String getImdbID() { return imdbID; }

    public String getMovieID() { return movieID; }

    public String getTitle() { return title; }

    public String getGenres() {
        return genres;
    }
}

package RecS.Models;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document
public class Users {
    @Id
    private final String userID;
    private final String gender;
    private final String age;
    private final String occupation;
    private final String zip;

    public Users(String userID, String gender, String age, String occupation, String zip) {
        this.userID = userID;
        this.age = age;
        this.gender = gender;
        this.occupation = occupation;
        this.zip = zip;
    }

    public String getAge() {
        return age;
    }

    public String getGender() {
        return gender;
    }

    public String getOccupation() {
        return occupation;
    }

    public String getUserID() {
        return userID;
    }

    public String getZip() { return zip; }
}

package RecS.Models;

public class MovieRec {
    private final String title;
    private final String limit;

    public MovieRec(String title, String limit) {
        this.title = title;
        this.limit = limit;
    }

    public String getTitle() {
        return title;
    }

    public String getLimit() {
        return limit;
    }
}

package RecS.Models;

public class UserRec {
    private final String gender;
    private final String age;
    private final String occupation;
    private final String genre;

    public UserRec(String gender, String age, String occupation, String genre) {
        this.gender = gender;
        this.age = age;
        this.occupation = occupation;
        this.genre = genre;
    }

    public String getGender() {
        return gender;
    }

    public String getAge() {
        return age;
    }

    public String getOccupation() {
        return occupation;
    }

    public String getGenre() {
        return genre;
    }
}

package RecS.MongoReps;

import RecS.Models.Movies;

import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.data.mongodb.repository.Query;
import org.springframework.stereotype.Repository;

@Repository
public interface MovieRepository extends MongoRepository<Movies, String> {
    @Query("{'title': ?0}")
    Movies findByTitle(String title);
}

package RecS.MongoReps;

import RecS.Models.Ratings;

import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface RatingRepository extends MongoRepository<Ratings, String> {
}

package RecS.MongoReps;

import RecS.Models.Users;

import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserRepository extends MongoRepository<Users, String>{
}

package RecS;

import com.mongodb.client.MongoClients;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.data.mongodb.core.MongoClientFactoryBean;
import org.springframework.data.mongodb.core.MongoTemplate;

@Configuration
public class MongoDBConfig {
    @Bean
    @Primary
    public MongoTemplate mongoTemplate(){
        return new MongoTemplate(MongoClients.create(), "user_db");
    }
}

package RecS;

// this class is the controller

import RecS.Models.*;


import RecS.MongoReps.MovieRepository;
import RecS.MongoReps.RatingRepository;
import RecS.MongoReps.UserRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.util.*;

import static RecS.Utils.CsvReader.*;
import static RecS.Utils.Recommender.*;

@CrossOrigin(origins = "*")
@RestController
@EnableMongoRepositories
public class App {
    private final MovieRepository movieRepository;
    private final RatingRepository ratingRepository;
    private final UserRepository userRepository;

    private final Logger LOG = LoggerFactory.getLogger(getClass());

    @Autowired
    public App(MovieRepository movieRepository, RatingRepository ratingRepository, UserRepository userRepository) throws IOException {
        this.movieRepository = movieRepository;
        this.ratingRepository = ratingRepository;
        this.userRepository = userRepository;

        LOG.info("\n*************** Loading csv files to Mongo DB ... ***************");
        this.movieRepository.saveAll(readMoviesCsv());
        LOG.info("\n*************** Loading movies to Movies Mongo DB: Success ***************");
        this.ratingRepository.saveAll(readRatingsCsv());
        LOG.info("\n*************** Loading ratings to Ratings Mongo DB: Success ***************");
        this.userRepository.saveAll(readUsersCsv());
        LOG.info("\n*************** Loading users to Users Mongo DB: Success ***************");
    }

    @GetMapping("/movies")
    public List<Movies> listAllMovies(){
        //return all movies
        LOG.info("\n*************** Returning all movies ***************");
        return movieRepository.findAll();
    }

    @GetMapping("/users/recommendations")
    public List<Movies> recommendByUser(
            @RequestParam(value = "gender", defaultValue = "") String gender,
            @RequestParam(value = "age", defaultValue = "") String age,
            @RequestParam(value = "occupation", defaultValue = "") String occupation,
            @RequestParam(value = "genre", defaultValue = "") String genre,
            @RequestParam(value="limit", defaultValue = "10") int limit
    ){
        List<Users> userList = userRepository.findAll();
        List<Ratings> ratingList = ratingRepository.findAll();
        List<Movies> movieList = movieRepository.findAll();

        //Mojno proverkuu dobavit vot zdes

        UserRec user = new UserRec(gender, parseAge(age), parseStringOccupation(occupation.toLowerCase(Locale.ROOT)), genre);

        if (!user.getGenre().equals("")) return getMovies(limitedTop(promoteFavGenre(gradeMovies(user, userList, ratingList), user.getGenre(), movieList), 10));
        return getMovies(limitedTop(gradeMovies(user, userList, ratingList), limit));
    }

    @GetMapping("/movies/recommendations")
    public List<Movies> recommendByFavGenre(@RequestParam("title") String title, @RequestParam(value = "limit", defaultValue = "10") int limit){
        Movies movie = movieRepository.findByTitle(title);
        List<Users> userList = userRepository.findAll();
        List<Ratings> ratingList = ratingRepository.findAll();

        Optional<Users> user = userRepository.findById(posFanFromMovieID(movie.getMovieID(), ratingList));

        // What if there is no any user who rated this movie
        if(user.isPresent()) return getMovies(limitedTop(gradeMovies(new UserRec(user.get().getGender(), user.get().getAge(), user.get().getOccupation(), ""), userList, ratingList),limit));
        return getMovies(limitedTop(gradeMovies(new UserRec("", "", "", ""),userList, ratingList),limit));
    }

    // Returns a List of Movies given List of movieIDs
    public List<Movies> getMovies(List<String> movieIDs){
        List<Movies> movies = new ArrayList<>();
        for(String movieID: movieIDs){
            Optional<Movies> movie = movieRepository.findById(movieID);
            movie.ifPresent(movies::add);
        }
        return movies;
    }
}

package RecS;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;
import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;

@SpringBootApplication(exclude = {MongoAutoConfiguration.class, MongoDataAutoConfiguration.class})
public class Cse364ProjectApplication{
	public static void main(String[] args){
		SpringApplication.run(Cse364ProjectApplication.class, args);
	}
}

package RecS.Utils;

import RecS.Models.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class CsvReader {
    public static List<Movies> readMoviesCsv() throws IOException {
        List<Movies> movies = new ArrayList<>();

        BufferedReader csvReader = new BufferedReader(new FileReader("./src/main/resources/movies_corrected.csv"));
        String line = csvReader.readLine();
        while (line != null) {
            String[] data = line.split(",");
            movies.add(new Movies(data[0], data[1], data[2], getPosterLinkByID(data[0]), getImdbByID(data[0])));
            line = csvReader.readLine();
        }
        csvReader.close();

        return movies;
    }

    public static List<Users> readUsersCsv() throws IOException {
        List<Users> users = new ArrayList<>();

        BufferedReader csvReader = new BufferedReader(new FileReader("./src/main/resources/users.csv"));
        String line = csvReader.readLine();

        while (line != null) {
            String[] data = line.split(",");
            users.add(new Users(data[0], data[1], data[2], data[3], data[4]));
            line = csvReader.readLine();
        }
        csvReader.close();

        return users;
    }

    public static List<Ratings> readRatingsCsv() throws IOException {
        List<Ratings> ratings = new ArrayList<>();

        BufferedReader csvReader = new BufferedReader(new FileReader("./src/main/resources/ratings.csv"));
        String line = csvReader.readLine();

        while (line != null) {
            String[] data = line.split(",");
            ratings.add(new Ratings(data[0], data[1], data[2], data[3]));
            line = csvReader.readLine();
        }
        csvReader.close();

        return ratings;
    }

//    // in the movies.dat file searches for movie with given title and returns its ID
//    public static String getIdByTitle(String title) throws IOException {
//        String id = ""; // get this from movies.dat file
//        BufferedReader movies = new BufferedReader(new FileReader("./data/movies.dat"));
//        String line = movies.readLine();
//
//        while ((line != null)) {
//            String[] film = line.split("::");
//            if (film[1].equals(title)) {
//                id = film[0];
//                break;
//            }
//            line = movies.readLine();
//        }
//        movies.close();
//        return id;
//    }

    public static String getImdbByID(String movieID) throws IOException {
        String link = "";
        BufferedReader linkReader = new BufferedReader(new FileReader("./src/main/resources/links.csv"));
        String line = linkReader.readLine();

        while ((line != null)) {
            String[] film = line.split(",");
            if (film[0].equals(movieID)) {
                link = film[1];
                break;
            }
            line = linkReader.readLine();
        }
        linkReader.close();
        return "https://www.imdb.com/title/tt" + link;
    }

    public static String getPosterLinkByID(String movieID) throws IOException {
        String posterLink = "";
        BufferedReader posterReader = new BufferedReader(new FileReader("./src/main/resources/movie_poster.csv"));
        String line = posterReader.readLine();

        while ((line != null)) {
            String[] film = line.split(",");
            if (film[0].equals(movieID)) {
                posterLink = film[1];
                break;
            }
            line = posterReader.readLine();
        }
        posterReader.close();
        return posterLink;
    }
}

package RecS.Utils;

import RecS.Models.Movies;
import RecS.Models.Ratings;
import RecS.Models.UserRec;
import RecS.Models.Users;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class Recommender{

    // Creates the List of #limit-top movies and returns it
    public static List<String> limitedTop(HashMap<String, Double> map, int limit) {
        List<String> top = new ArrayList<>();

        for (int i = 0; i < limit && i < map.size(); i++) {
            String id = null;
            Double maxR = Double.MIN_VALUE;
            for (String key : map.keySet()) {
                if (map.get(key) > maxR) {
                    maxR = map.get(key);
                    id = key;
                }
            }
            top.add(id);
            map.remove(id);
        }

        return top;
    }

    // Calculate and assign relevancy score for each movie
    public static HashMap<String, Double> gradeMovies(UserRec user, List<Users> userList, List<Ratings> ratingList) {
        double coef = 0.333;
        HashMap<String, Double> simUsers = new HashMap<>();
        HashMap<String, Double> movies = new HashMap<>();

        for(Users e: userList){
            double fac = 0;
            fac += (e.getGender().equals(user.getGender()) ? coef : 0) + (e.getAge().equals(user.getAge()) ? coef : 0) + (e.getOccupation().equals(user.getOccupation()) ? coef : 0);
            simUsers.put(e.getUserID(), fac);
        }

        for(Ratings e: ratingList){
            if(movies.containsKey(e.getMovieID())){
                movies.put(e.getMovieID(), (Integer.parseInt(e.getRating()) * (simUsers.get(e.getUserID()) + 1) + movies.get(e.getMovieID())) / 2);
            } else {
                movies.put(e.getMovieID(), Integer.parseInt(e.getUserID()) * (simUsers.get(e.getUserID()) + 1));
            }
        }

        return movies;
    }

    // if favorite genre is given, promote movies with such genres
    public static HashMap<String, Double> promoteFavGenre(HashMap<String, Double> map, String cat, List<Movies> movieList){
        String[] catArr = cat.toLowerCase().split("\\|");

        for(Movies movie: movieList) {
            Set<String> cats = new HashSet<>(Arrays.asList(movie.getGenres().toLowerCase().split("\\|")));
            for (String s : catArr) {
                if (cats.contains(s)) {
                    if (map.get(movie.getMovieID()) != null) map.put(movie.getMovieID(), map.get(movie.getMovieID()) * 10);
                    break;
                }
            }
        }
        return map;
    }

    //find the user that has given the greatest rating to the movie with movieID
    public static String posFanFromMovieID(String movieID, List<Ratings> ratingsList){
        String userId = "";
        int maxRating = 0;// get this from ratings.dat file

        for(Ratings r: ratingsList){
            if (r.getMovieID().equals(movieID) && Integer.parseInt(r.getRating()) > maxRating) {
                maxRating = Integer.parseInt(r.getRating());
                userId = r.getUserID();
            }
        }

        return userId;
    }

    public static boolean isValidInput(String gender, String age, String occupation, String genre) throws IOException {
        boolean isValid = true;

        // Invalid gender error
        if (!isGender(gender) && !gender.equals("")) { // check here
            System.out.printf("Invalid gender: \"%s\"\n", gender);
            isValid = false;
        }
        //Invalid age error
        if (!isValidAge(age) && !age.equals("")) {
            System.out.printf("Invalid age: \"%s\"\n", age);
            isValid = false;
        }
        //Invalid occupation error
        if (!isOccupation(occupation.toLowerCase()) && !occupation.equals("")) {
            System.out.printf("Invalid occupation: \"%s\"\n", occupation);
            isValid = false;
        }
        //Invalid genre error
        if (!isGenre(genre)) {
            System.out.printf("Invalid genre: \"%s\"\n", genre);
            isValid = false;
        }
        return isValid;
    }

    // If genre is present in movies, return true; otherwise false
    public static boolean isGenre(String genre) throws IOException {
        if (genre.equals("")) return true;
        Set<String> genres = new HashSet<>(Arrays.asList(genre.toLowerCase().split("\\|")));
        Set<String> allGenres = new HashSet<>();

        BufferedReader movies = new BufferedReader(new FileReader("./data/movies.dat"));
        String line = movies.readLine();

        while (line != null) {
            String[] arrOfStr = line.toLowerCase().split("::");
            allGenres.addAll(Arrays.asList(arrOfStr[2].toLowerCase().split("\\|")));
            line = movies.readLine();
        }
        movies.close();
        return allGenres.containsAll(genres);
    }

    // If gender is either M or F, return true; otherwise return false
    public static boolean isGender(String gender) {
        return gender.equals("M") || gender.equals("F");
    }

    // If age is greater than -1 and is number, return true; otherwise false;
    public static boolean isValidAge(String age) {
        return !parseAge(age).equals("-1");
    }

    // If translation of occupation to its number is successful, return true; otherwise false.
    public static boolean isOccupation(String occ) {
        return !parseStringOccupation(occ).equals("-1");
    }

    // Return range representation for each input age, using info in README.pm
    public static String parseAge(String age) {

        try {
            int ageInt = Integer.parseInt(age);
            if (ageInt < 0) return "-1";
            if (ageInt < 18) return "1";
            if (ageInt < 25) return "18";
            if (ageInt < 35) return "25";
            if (ageInt < 45) return "35";
            if (ageInt < 50) return "45";
            if (ageInt < 56) return "50";
            return "56";
        } catch (Exception e) {
            return "-1";
        }
    }

    public static String parseStringOccupation(String occupation) {
        String occupationIndex;
        switch (occupation) {
//            case "other":
//                //0:  "other" or not specified??
//                occupationIndex = "0";
//                break;
            case "": // occupation is omitted
                occupationIndex = "";
                break;
            case "academic":
            case "educator":
                occupationIndex = "1";
                break;
            case "artist":
                occupationIndex = "2";
                break;
            case "clerical":
            case "admin":
                occupationIndex = "3";
                break;
            case "college":
            case "grad student":
            case "gradstudent":
                occupationIndex = "4";
                break;
            case "customer service":
            case "customerservice":
                occupationIndex = "5";
                break;
            case "doctor":
            case "health care":
            case "healthcare":
                occupationIndex = "6";
                break;
            case "executive":
            case "managerial":
                occupationIndex = "7";
                break;
            case "farmer":
                occupationIndex = "8";
                break;
            case "homemaker":
                occupationIndex = "9";
                break;
            case "K-12 studio":
            case "K-12studio":
                occupationIndex = "10";
                break;
            case "lawyer":
                occupationIndex = "11";
                break;
            case "programmer":
                occupationIndex = "12";
                break;
            case "retired":
                occupationIndex = "13";
                break;
            case "sales":
            case "marketing":
                occupationIndex = "14";
                break;
            case "scientist":
                occupationIndex = "15";
                break;
            case "self-employed":
                occupationIndex = "16";
                break;
            case "technician":
            case "engineer":
                occupationIndex = "17";
                break;
            case "tradesman":
            case "craftsman":
                occupationIndex = "18";
                break;
            case "unemployed":
                occupationIndex = "19";
                break;
            case "writing":
                occupationIndex = "20";
                break;
            default:
                occupationIndex = "-1";
        }
        return occupationIndex;
    }
}

/*
 * Copyright 2007-present the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.net.*;
import java.io.*;
import java.nio.channels.*;
import java.util.Properties;

public class MavenWrapperDownloader {

    private static final String WRAPPER_VERSION = "0.5.6";
    /**
     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.
     */
    private static final String DEFAULT_DOWNLOAD_URL = "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/"
        + WRAPPER_VERSION + "/maven-wrapper-" + WRAPPER_VERSION + ".jar";

    /**
     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to
     * use instead of the default one.
     */
    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =
            ".mvn/wrapper/maven-wrapper.properties";

    /**
     * Path where the maven-wrapper.jar will be saved to.
     */
    private static final String MAVEN_WRAPPER_JAR_PATH =
            ".mvn/wrapper/maven-wrapper.jar";

    /**
     * Name of the property which should be used to override the default download url for the wrapper.
     */
    private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";

    public static void main(String args[]) {
        System.out.println("- Downloader started");
        File baseDirectory = new File(args[0]);
        System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());

        // If the maven-wrapper.properties exists, read it and check if it contains a custom
        // wrapperUrl parameter.
        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);
        String url = DEFAULT_DOWNLOAD_URL;
        if(mavenWrapperPropertyFile.exists()) {
            FileInputStream mavenWrapperPropertyFileInputStream = null;
            try {
                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);
                Properties mavenWrapperProperties = new Properties();
                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);
                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);
            } catch (IOException e) {
                System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");
            } finally {
                try {
                    if(mavenWrapperPropertyFileInputStream != null) {
                        mavenWrapperPropertyFileInputStream.close();
                    }
                } catch (IOException e) {
                    // Ignore ...
                }
            }
        }
        System.out.println("- Downloading from: " + url);

        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);
        if(!outputFile.getParentFile().exists()) {
            if(!outputFile.getParentFile().mkdirs()) {
                System.out.println(
                        "- ERROR creating output directory '" + outputFile.getParentFile().getAbsolutePath() + "'");
            }
        }
        System.out.println("- Downloading to: " + outputFile.getAbsolutePath());
        try {
            downloadFileFromURL(url, outputFile);
            System.out.println("Done");
            System.exit(0);
        } catch (Throwable e) {
            System.out.println("- Error downloading");
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void downloadFileFromURL(String urlString, File destination) throws Exception {
        if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {
            String username = System.getenv("MVNW_USERNAME");
            char[] password = System.getenv("MVNW_PASSWORD").toCharArray();
            Authenticator.setDefault(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });
        }
        URL website = new URL(urlString);
        ReadableByteChannel rbc;
        rbc = Channels.newChannel(website.openStream());
        FileOutputStream fos = new FileOutputStream(destination);
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        fos.close();
        rbc.close();
    }

}

