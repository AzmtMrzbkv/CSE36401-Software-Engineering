package RecS;

public class LimitedRec {
    private final String title;
    private final String limit;

    public LimitedRec(String title, String limit) {
        this.title = title;
        this.limit = limit;
    }

    public String getTitle() {
        return title;
    }

    public String getLimit() {
        return limit;
    }
}

package RecS;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RestServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(RestServiceApplication.class, args);
    }
}
package RecS;

public class Movies {
    private final String title;
    private final String genres;
    private final String imdb;

    public Movies(String title, String imdb, String genres) {
        this.title = title;
        this.imdb = imdb;
        this.genres = genres;
    }

    public String getTitle() {
        return title;
    }

    public String getImdb() {
        return imdb;
    }

    public String getGenres() {
        return genres;
    }

    @Override
    public String toString() {
        return "Movies{" +
                "title='" + title + '\'' +
                ", genres='" + genres + '\'' +
                ", imdb='" + imdb + '\'' +
                '}';
    }
}

package RecS;

public class Users {
    private final String gender;
    private final String age;
    private final String occupation;
    private final String genres; //favorite genre

    public Users(String gender, String age, String occupation, String genres) {
        this.age = age;
        this.gender = gender;
        this.occupation = occupation;
        this.genres = genres;
    }

    public String getAge() {
        return age;
    }

    public String getGender() {
        return gender;
    }

    public String getOccupation() {
        return occupation;
    }

    public String getGenres() {
        return genres;
    }

    @Override
    public String toString() {
        return "Users{" +
                "gender=" + gender +
                ", age=" + age +
                ", occupation='" + occupation + '\'' +
                ", genres=" + genres +
                '}';
    }
}

package RecS;

// this class will be the controller

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.util.List;

@RestController
public class App {
    //here will be functions mapped to GET

    @GetMapping("/users/recommendations")
    public List<Movies> recommendForUser(@RequestBody Users newUser) throws IOException {
        // this part to be implemented
        String age = newUser.getAge();
        String genre = newUser.getGenres();
        String gender = newUser.getGender();
        String occupation = newUser.getOccupation();

        // check the input validity
        if (!Recommender.isValidInput(gender, age, occupation, genre)) {
            return null;
        }

        return Recommender.limitedTop(Recommender.gradeMovies(new String[]{gender, age, occupation, genre}), 10);
    }

    @GetMapping("/movies/recommendations")
    public List<Movies> recommendByMovie(@RequestBody LimitedRec newRequest) throws IOException {
        // this part to be implemented
        Users newUser = Recommender.posFanFromMovieID(Recommender.getIdByTitle(newRequest.getTitle()));
        return Recommender.limitedTop(Recommender.gradeMovies(new String[]{newUser.getGender(), newUser.getAge(), newUser.getOccupation(), newUser.getGenres()}), (newRequest.getLimit() == null) ? 10 :Integer.parseInt(newRequest.getLimit()));
    }

}

package RecS;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class Recommender {

    // Creates the List of #limit-top movies and returns it
    //changes from mile2 starts here
    public static List<Movies> limitedTop(HashMap<String, Double> map, int limit) throws IOException {
        List<Movies> top = new ArrayList<>();

        for (int i = 0; i < limit && i < map.size(); i++) {
            String id = null;
            Double maxR = Double.MIN_VALUE;
            for (String key : map.keySet()) {
                if (map.get(key) > maxR) {
                    maxR = map.get(key);
                    id = key;
                }
            }
            top.add(new Movies(getTitleByID(id), getImdbByID(id), getGenreByID(id)));
            map.remove(id);
        }

        return top;
    }

    // Calculate and assign relevancy score for each movie
    public static HashMap<String, Double> gradeMovies(String[] args) throws IOException {
        double[] coef = {0.333, 0.333, 0.333};
        HashMap<String, Double> simUsers = new HashMap<>();
        HashMap<String, Double> movies = new HashMap<>();

        args[1] = parseAge(args[1]);
        args[2] = parseStringOccupation(args[2]);

        //Calculate the similarity of users
        String[] arrOfStr;
        double fac;
        String line = "";
        BufferedReader users = new BufferedReader(new FileReader("./data/users.dat"));
        line = users.readLine(); //UserID::Gender::Age::Occupation::Zip-code
        while (line != null) {
            fac = 0;
            arrOfStr = line.split("::");
            for (int i = 0; i < 3; i++) fac += arrOfStr[i + 1].equalsIgnoreCase(args[i]) ? coef[i] : 0;
            simUsers.put(arrOfStr[0], fac);
            line = users.readLine();
        }
        users.close();
        // map new rating to movies
        BufferedReader ratings = new BufferedReader(new FileReader("./data/ratings.dat"));
        line = ratings.readLine(); //UserID::MovieID::Rating::Timestamp
        while (line != null) {
            arrOfStr = line.split("::");
            if (movies.containsKey(arrOfStr[1])) {
                movies.put(arrOfStr[1], (Integer.parseInt(arrOfStr[2]) * (simUsers.get(arrOfStr[0]) + 1) + movies.get(arrOfStr[1])) / 2);
            } else {
                movies.put(arrOfStr[1], Integer.parseInt(arrOfStr[2]) * (simUsers.get(arrOfStr[0]) + 1));
            }
            line = ratings.readLine();
        }
        ratings.close();
        if (!args[3].equals("")) return promoteFavGenre(movies, args[3]);
        return movies;
    }

    // if favorite genre is given, promote movies with such genres
    public static HashMap<String, Double> promoteFavGenre(HashMap<String, Double> map, String cat) throws IOException {
        String[] catArr = cat.toLowerCase().split("\\|");

        String[] arrOfStr;
        Set<String> cats;

        BufferedReader movies = new BufferedReader(new FileReader("./data/movies.dat"));
        String line = movies.readLine();
        while (line != null) {
            arrOfStr = line.split("::");
            cats = new HashSet<>(Arrays.asList(arrOfStr[2].toLowerCase().split("\\|")));
            for (String s : catArr) {
                if (cats.contains(s)) {
                    if (map.get(arrOfStr[0]) != null) map.put(arrOfStr[0], map.get(arrOfStr[0]) * 10);
                    break;
                }
            }
            line = movies.readLine();
        }
        movies.close();
        return map;
    }


    // in the movies.dat file searches for movies with given ID and returns its genre
    public static String getGenreByID(String movieID) throws IOException {
        String genre = "";
        BufferedReader movies = new BufferedReader(new FileReader("./data/movies.dat"));

        String line = movies.readLine();

        while ((line != null)) {
            String[] film = line.split("::");
            if (film[0].equals(movieID)) {
                genre = film[2];
                break;
            }
            line = movies.readLine();
        }
        movies.close();
        return genre;
    }

    //find the user that has given the greatest rating to the movie with movieID
    public static Users posFanFromMovieID(String movieID) throws IOException {
        String userId = "";
        int maxRating = 0;// get this from ratings.dat file
        BufferedReader ratings = new BufferedReader(new FileReader("./data/ratings.dat"));
        String line = ratings.readLine();

        while ((line != null)) {
            String[] arr = line.split("::");
            if (arr[1].equals(movieID) && Integer.parseInt(arr[2]) > maxRating) {
                maxRating = Integer.parseInt(arr[2]);
                userId = arr[0];
            }
            line = ratings.readLine();
        }
        ratings.close();

        return getUserById(userId);
    }

    // in the movies.dat file searches for movies with given ID and returns its title
    public static String getTitleByID(String movieID) throws IOException {
        String title = "";
        BufferedReader movies = new BufferedReader(new FileReader("./data/movies.dat"));
        String line = movies.readLine();

        while ((line != null)) {
            String[] film = line.split("::");
            if (film[0].equals(movieID)) {
                title = film[1];
                break;
            }
            line = movies.readLine();
        }
        movies.close();
        return title;
    }

    //find user with given userId
    public static Users getUserById(String userID) throws IOException {
        BufferedReader users = new BufferedReader(new FileReader("./data/users.dat"));
        String line = users.readLine();

        while ((line != null)) {
            String[] arr = line.split("::");
            if (arr[0].equals(userID)) {
                return new Users(arr[1], arr[2], arr[3], "");
            }
            line = users.readLine();
        }
        return null;
    }

    public static String getImdbByID(String movieID) throws IOException {
        String link = ""; // get this from links.dat
        BufferedReader movies = new BufferedReader(new FileReader("./data/links.dat"));
        String line = movies.readLine();

        while ((line != null)) {
            String[] film = line.split("::");
            if (film[0].equals(movieID)) {
                link = film[1];
                break;
            }
            line = movies.readLine();
        }
        movies.close();
        return "https://www.imdb.com/title/tt" + link;
    }


    // in the movies.dat file searches for movie with given title and returns its ID
    public static String getIdByTitle(String title) throws IOException {
        String id = ""; // get this from movies.dat file
        BufferedReader movies = new BufferedReader(new FileReader("./data/movies.dat"));
        String line = movies.readLine();

        while ((line != null)) {
            String[] film = line.split("::");
            if (film[1].equals(title)) {
                id = film[0];
                break;
            }
            line = movies.readLine();
        }
        movies.close();
        return id;
    }

    public static boolean isValidInput(String gender, String age, String occupation, String genre) throws IOException {
        boolean isValid = true;

        // Invalid gender error
        if (!isGender(gender) && !gender.equals("")) { // check here
            System.out.printf("Invalid gender: \"%s\"\n", gender);
            isValid = false;
        }
        //Invalid age error
        if (!isValidAge(age) && !age.equals("")) {
            System.out.printf("Invalid age: \"%s\"\n", age);
            isValid = false;
        }
        //Invalid occupation error
        if (!isOccupation(occupation.toLowerCase()) && !occupation.equals("")) {
            System.out.printf("Invalid occupation: \"%s\"\n", occupation);
            isValid = false;
        }
        //Invalid genre error
        if (!isGenre(genre)) {
            System.out.printf("Invalid genre: \"%s\"\n", genre);
            isValid = false;
        }
        return isValid;
    }

    // If genre is present in movies, return true; otherwise false
    // has changes from mile2 (end here)
    public static boolean isGenre(String genre) throws IOException {
        if (genre.equals("")) return true;
        Set<String> genres = new HashSet<>(Arrays.asList(genre.toLowerCase().split("\\|")));
        Set<String> allGenres = new HashSet<>();

        BufferedReader movies = new BufferedReader(new FileReader("./data/movies.dat"));
        String line = movies.readLine();

        while (line != null) {
            String[] arrOfStr = line.toLowerCase().split("::");
            allGenres.addAll(Arrays.asList(arrOfStr[2].toLowerCase().split("\\|")));
            line = movies.readLine();
        }
        movies.close();
        return allGenres.containsAll(genres);
    }

    // If gender is either M or F, return true; otherwise return false
    public static boolean isGender(String gender) {
        return gender.equals("M") || gender.equals("F");
    }

    // If age is greater than -1 and is number, return true; otherwise false;
    public static boolean isValidAge(String age) {
        return !parseAge(age).equals("-1");
    }

    // If translation of occupation to its number is successful, return true; otherwise false.
    public static boolean isOccupation(String occ) {
        return !parseStringOccupation(occ).equals("-1");
    }

    // Return range representation for each input age, using info in README.pm
    public static String parseAge(String age) {

        try {
            int ageInt = Integer.parseInt(age);
            if (ageInt < 0) return "-1";
            if (ageInt < 18) return "1";
            if (ageInt < 25) return "18";
            if (ageInt < 35) return "25";
            if (ageInt < 45) return "35";
            if (ageInt < 50) return "45";
            if (ageInt < 56) return "50";
            return "56";
        } catch (Exception e) {
            return "-1";
        }
    }

    public static String parseStringOccupation(String occupation) {
        String occupationIndex;
        switch (occupation) {
//            case "other":
//                //0:  "other" or not specified??
//                occupationIndex = "0";
//                break;
            case "": // occupation is omitted
                occupationIndex = "";
                break;
            case "academic":
            case "educator":
                occupationIndex = "1";
                break;
            case "artist":
                occupationIndex = "2";
                break;
            case "clerical":
            case "admin":
                occupationIndex = "3";
                break;
            case "college":
            case "grad student":
            case "gradstudent":
                occupationIndex = "4";
                break;
            case "customer service":
            case "customerservice":
                occupationIndex = "5";
                break;
            case "doctor":
            case "health care":
            case "healthcare":
                occupationIndex = "6";
                break;
            case "executive":
            case "managerial":
                occupationIndex = "7";
                break;
            case "farmer":
                occupationIndex = "8";
                break;
            case "homemaker":
                occupationIndex = "9";
                break;
            case "K-12 studio":
            case "K-12studio":
                occupationIndex = "10";
                break;
            case "lawyer":
                occupationIndex = "11";
                break;
            case "programmer":
                occupationIndex = "12";
                break;
            case "retired":
                occupationIndex = "13";
                break;
            case "sales":
            case "marketing":
                occupationIndex = "14";
                break;
            case "scientist":
                occupationIndex = "15";
                break;
            case "self-employed":
                occupationIndex = "16";
                break;
            case "technician":
            case "engineer":
                occupationIndex = "17";
                break;
            case "tradesman":
            case "craftsman":
                occupationIndex = "18";
                break;
            case "unemployed":
                occupationIndex = "19";
                break;
            case "writing":
                occupationIndex = "20";
                break;
            default:
                occupationIndex = "-1";
        }
        return occupationIndex;
    }
}

package RecS;

import static org.junit.Assert.*;
import org.junit.Test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class RecommenderTest {

    @Test
    public void testParseStringOccupation() {
        Recommender tester = new Recommender();
        assertEquals("result","", tester.parseStringOccupation(""));
        assertEquals("result", "1", tester.parseStringOccupation("academic"));
        assertEquals("result","1", tester.parseStringOccupation("educator"));
        assertEquals("result","4", tester.parseStringOccupation("grad student"));
        assertEquals("result","4", tester.parseStringOccupation("gradstudent"));
        assertEquals("result","-1", tester.parseStringOccupation("grastudent"));
        assertEquals("result","-1", tester.parseStringOccupation("fsfsfdwq"));
        assertEquals("result", "2", tester.parseStringOccupation("artist"));
        assertEquals("result", "3", tester.parseStringOccupation("admin"));
        assertEquals("result", "5", tester.parseStringOccupation("customerservice"));
        assertEquals("result", "6", tester.parseStringOccupation("doctor"));
        assertEquals("result", "7", tester.parseStringOccupation("executive"));
        assertEquals("result", "8", tester.parseStringOccupation("farmer"));
        assertEquals("result", "9", tester.parseStringOccupation("homemaker"));
        assertEquals("result", "10", tester.parseStringOccupation("K-12studio"));
        assertEquals("result", "11", tester.parseStringOccupation("lawyer"));
        assertEquals("result", "12", tester.parseStringOccupation("programmer"));
        assertEquals("result", "13", tester.parseStringOccupation("retired"));
        assertEquals("result", "14", tester.parseStringOccupation("sales"));
        assertEquals("result", "15", tester.parseStringOccupation("scientist"));
        assertEquals("result", "16", tester.parseStringOccupation("self-employed"));
        assertEquals("result", "17", tester.parseStringOccupation("engineer"));
        assertEquals("result", "18", tester.parseStringOccupation("tradesman"));
        assertEquals("result", "19", tester.parseStringOccupation("unemployed"));
        assertEquals("result", "20", tester.parseStringOccupation("writing"));
    }

    @Test
    public void testParseAge() {
        Recommender tester = new Recommender();
        assertEquals("-1", tester.parseAge("-2123"));
        assertEquals("-1", tester.parseAge("gradstud"));
        assertEquals("1", tester.parseAge("7"));
        assertEquals("45", tester.parseAge("45"));
        assertEquals("56", tester.parseAge("57"));
        assertEquals("-1", tester.parseAge("4294967326"));
    }


    @Test
    public void testIsOccupation(){
        Recommender tester = new Recommender();
        assertEquals("result", true, tester.isOccupation("academic"));
        assertEquals("result", true, tester.isOccupation(""));
        assertEquals("result", false, tester.isOccupation("academc"));
        assertEquals("result", true, tester.isOccupation("educator"));
        assertEquals("result", true, tester.isOccupation("gradstudent"));
        assertEquals("result", false, tester.isOccupation("programer"));
    }

    @Test
    public void testIsValidAge() {
        Recommender tester = new Recommender();
        assertEquals("result", true, tester.isValidAge("5"));
        assertEquals("result", true, tester.isValidAge("0"));
        assertEquals("result", true, tester.isValidAge("19"));
        assertEquals("result", true, tester.isValidAge("34"));
        assertEquals("result", true, tester.isValidAge("43"));
        assertEquals("result", true, tester.isValidAge("45"));
        assertEquals("result", true, tester.isValidAge("51"));
        assertEquals("result", false, tester.isValidAge("0x`"));
        assertEquals("result", true, tester.isValidAge("0"));
        assertEquals("result", true, tester.isValidAge("57"));
        assertEquals("result", false, tester.isValidAge("Ffsfs"));
        assertEquals("result", false, tester.isValidAge("-231"));
    }

    @Test
    public void testIsGender() {
        Recommender tester = new Recommender();
        assertEquals("result", true, tester.isGender("M"));
        assertEquals("result", false, tester.isGender("f"));
        assertEquals("result", true, tester.isGender("F"));
        assertEquals("result", false, tester.isGender(""));
    }

    @Test
    public void testIsValidInput() throws IOException {
        Recommender tester = new Recommender();

        assertEquals(true, tester.isValidInput("M","23", "doctor", ""));
        assertEquals(true, tester.isValidInput("", "", "executive", "comedy|horror"));
        assertEquals(false, tester.isValidInput("F", "", "e", ""));
        assertEquals(true, tester.isValidInput("F", "15", "college", "sci-fi"));
        assertEquals(true, tester.isValidInput("", "", "", "AdVenturE"));
        assertEquals(true, tester.isValidInput("", "", "", ""));
        assertEquals(false, tester.isValidInput("M", "1000", "sale", ""));
        assertEquals(true, tester.isValidInput("M", "0", "unemployed", "Romance"));
        assertEquals(false, tester.isValidInput("ad", "sdfs", "fds", ""));
        assertEquals(false, tester.isValidInput("M", "0", "unemployed", "Romanc"));
        assertEquals(true, tester.isValidInput("", "", "", "comedy|horror"));
    }

    @Test
    public void testIsGenre() throws IOException {
        Recommender tester = new Recommender();

        assertEquals(true, tester.isGenre("comedy|horror"));
        assertEquals(true, tester.isGenre("western|comedy"));
        assertEquals(true,tester.isGenre("drama|Thriller"));
        assertEquals(false, tester.isGenre("wesern"));
        assertEquals(true, tester.isGenre(""));

    }

    @Test
    public void testGradeMovies() throws IOException{
        Recommender tester = new Recommender();
        String[] a = {"", "", "", ""};
        assertNotNull(tester.gradeMovies(a));
        assertEquals(true, tester.gradeMovies(a).size() > 0);
        a = new String[]{"M", "23", "doctor", ""};
        assertNotNull(tester.gradeMovies(a));
        assertEquals(true, tester.gradeMovies(a).size() > 0);

    }

    @Test
    public void testPromoteFavGenre() throws IOException {
        Recommender tester = new Recommender();
        String[] a = {"", "", "", ""};
        assertNotNull(tester.promoteFavGenre(tester.gradeMovies(a), "fantasy"));
        assertEquals(true, tester.promoteFavGenre(tester.gradeMovies(a), "sci-fi").size() > 0);
    }


    @Test
    public void getGenreByID() throws IOException {
        assertEquals("Animation|Children's|Comedy", Recommender.getGenreByID("1"));
        assertEquals("Adventure|Children's|Fantasy", Recommender.getGenreByID("2"));
    }

    @Test
    public void getTitleByID() throws IOException {
        assertEquals("Toy Story (1995)", Recommender.getTitleByID("1"));
        assertEquals("Jumanji (1995)", Recommender.getTitleByID("2"));
    }

    @Test
    public void getImdbByID() throws IOException {
        assertEquals("https://www.imdb.com/title/tt0114709", Recommender.getImdbByID("1"));
        assertEquals("https://www.imdb.com/title/tt0113497", Recommender.getImdbByID("2"));
    }

    @Test
    public void limTop() throws IOException {
        List<Movies> expected = new ArrayList<>();
        Movies movie1 = new Movies("Braveheart (1995)", "https://www.imdb.com/title/tt0112573", "Action|Drama|War");
        Movies movie2 = new Movies("Schindler's List (1993)", "https://www.imdb.com/title/tt0108052", "Drama|War");

        expected.add(movie1);
        expected.add(movie2);

        List<Movies> arr = Recommender.limitedTop(Recommender.gradeMovies(new String[]{"F", "25", "Grad student", "Action|War"}), 2);

        for(int i = 0; i < 2; i++){
            assertEquals(expected.get(i).getGenres(), arr.get(i).getGenres());
            assertEquals(expected.get(i).getTitle(), arr.get(i).getTitle());
            assertEquals(expected.get(i).getImdb(), arr.get(i).getImdb());
        }
    }

    @Test
    public void getIDByTitle() throws IOException {
        assertEquals("1", Recommender.getIdByTitle("Toy Story (1995)"));
        assertEquals("2", Recommender.getIdByTitle("Jumanji (1995)"));
    }

    @Test
    public void getUserByID() throws IOException, NullPointerException {
        Users user = new Users("F", "1", "10", "");
        assertEquals(user.getAge(), Recommender.getUserById("1").getAge());
        assertEquals(user.getGender(), Recommender.getUserById("1").getGender());
        assertNull(Recommender.getUserById("-5"));
    }

    @Test
    public void fanTest() throws IOException, NullPointerException {
        Users user = new Users("F", "1", "10", "");
        assertEquals(user.getGenres(), Recommender.posFanFromMovieID("1").getGenres());
        assertEquals(user.getOccupation(), Recommender.posFanFromMovieID("1").getOccupation());
    }

}
package RecS;

import org.junit.Test;

import static org.junit.Assert.*;

public class MoviesTest {

    @Test
    public void testGetTitle() {
        Movies movie = new Movies("Matrix, The (1999)", "https://www.imdb.com/title/tt0133093/", "Action|Sci-Fi|Thriller");
        assertEquals("Matrix, The (1999)", movie.getTitle());
    }

    @Test
    public void testGetImdb() {
        Movies movie = new Movies("Matrix, The (1999)", "https://www.imdb.com/title/tt0133093/", "Action|Sci-Fi|Thriller");
        assertEquals("https://www.imdb.com/title/tt0133093/", movie.getImdb());
    }

    @Test
    public void testGetGenres() {
        Movies movie = new Movies("Matrix, The (1999)", "https://www.imdb.com/title/tt0133093/", "Action|Sci-Fi|Thriller");
        assertEquals("Action|Sci-Fi|Thriller", movie.getGenres());
    }


    @Test
    public void testToString() {
        Movies movie = new Movies("Matrix, The (1999)", "https://www.imdb.com/title/tt0133093/", "Action|Sci-Fi|Thriller");
        assertEquals("Movies{" + "title='" + movie.getTitle() + '\'' + ", genres='" + movie.getGenres() + '\'' + ", imdb='" + movie.getImdb() + '\'' + '}', movie.toString());
    }
}
package RecS;

import org.junit.Test;

import static org.junit.Assert.*;

public class LimitedRecTest {

    @Test
    public void getTitle() {
        LimitedRec lr = new LimitedRec("Matrix, The (1999)", "10");
        assertEquals("Matrix, The (1999)", lr.getTitle());
    }

    @Test
    public void getLimit() {
        LimitedRec lr = new LimitedRec("Matrix, The (1999)", "10");
        assertEquals("10", lr.getLimit());
    }


}
package RecS;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class UsersTest {

    @Test
    void getAge() {
        Users user = new Users("F","25", "Grad student", "Action|War");
        assertEquals("25", user.getAge());
    }

    @Test
    void getGender() {
        Users user = new Users("F","25", "Grad student", "Action|War");
        assertEquals("F", user.getGender());
    }

    @Test
    void getOccupation() {
        Users user = new Users("F","25", "Grad student", "Action|War");
        assertEquals("Grad student", user.getOccupation());
    }

    @Test
    void getGenres() {
        Users user = new Users("F","25", "Grad student", "Action|War");
        assertEquals("Action|War", user.getGenres());
    }

    @Test
    void testToString() {
        Users user = new Users("F","25", "Grad student", "Action|War");
        assertEquals("Users{" +
                "gender=" + user.getGender() +
                ", age=" + user.getAge() +
                ", occupation='" + user.getOccupation() + '\'' +
                ", genres=" + user.getGenres() +
                '}', user.toString());
    }
}
